(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{466:function(t,a,v){"use strict";v.r(a);var _=v(44),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"面向对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),v("h2",{attrs:{id:"概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),v("ul",[v("li",[t._v("至少有两个概念，一，类，即模版，二，对象，即实例")])]),t._v(" "),v("h2",{attrs:{id:"三要素"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三要素"}},[t._v("#")]),t._v(" 三要素")]),t._v(" "),v("ul",[v("li",[t._v("继承，封装，多态，继承用得较多，封装多态用得较少")]),t._v(" "),v("li",[t._v("继承即子类继承父类\n"),v("ul",[v("li",[t._v("父类是公共的，是可以被所有的子类继承的")]),t._v(" "),v("li",[t._v("继承可以将公共方法抽离出来，提高复用，减少冗余")])])]),t._v(" "),v("li",[t._v("封装即数据变量的权限和保密\n"),v("ul",[v("li",[t._v("减少耦合，有利于封装私有变量，实现模块化")]),t._v(" "),v("li",[t._v("利于数据和接口的权限管理")]),t._v(" "),v("li",[t._v("ES6目前不支持，一般认为_开头的即为private")]),t._v(" "),v("li",[t._v("无法通过像java语言那样，通过private关键字声明去实现封装，但可以通过立即执行函数和闭包去实现")])])]),t._v(" "),v("li",[t._v("多态即同一接口的不同实现\n"),v("ul",[v("li",[t._v("js应用极少，因为ta 需要java语言的接口，重写，重载等功能")]),t._v(" "),v("li",[t._v("保持子类的开放性和灵活性，，可以把公共方法抽离出来，放到父类中去继承，这样去提高复用，减少冗余，但是如果子类中需要灵活的做一些特殊处理，我们还是可以进行修改的")]),t._v(" "),v("li",[t._v("面向接口编程")])])])]),t._v(" "),v("h2",{attrs:{id:"js应用举例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#js应用举例"}},[t._v("#")]),t._v(" JS应用举例")]),t._v(" "),v("h2",{attrs:{id:"面向对象的意义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的意义"}},[t._v("#")]),t._v(" 面向对象的意义")]),t._v(" "),v("ul",[v("li",[t._v("为什么要使用面向对象？实现数据的结构化")]),t._v(" "),v("li",[t._v("对于计算机来说，结构化才是最简单的，而编程的目标应该是简单和抽象")])])])}),[],!1,null,null,null);a.default=s.exports}}]);