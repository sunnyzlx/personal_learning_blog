(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{465:function(n,t,e){"use strict";e.r(t);var a=e(44),i=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"防抖与截流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#防抖与截流"}},[n._v("#")]),n._v(" 防抖与截流")]),n._v(" "),e("ul",[e("li",[n._v("可参考underscore,lodash通用工具库")])]),n._v(" "),e("h2",{attrs:{id:"函数防抖-限制操作频率的函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数防抖-限制操作频率的函数"}},[n._v("#")]),n._v(" 函数防抖-限制操作频率的函数")]),n._v(" "),e("ul",[e("li",[n._v("防抖函数原理:在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。")]),n._v(" "),e("li",[n._v("适用场景：\n"),e("ul",[e("li",[n._v("按钮提交场景：防止多次提交按钮，只执行最后提交的一次")]),n._v(" "),e("li",[n._v("服务端验证场景：表单验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有搜索联想词功能类似")]),n._v(" "),e("li",[n._v("生产环境请用lodash.debounce")])])])]),n._v(" "),e("h2",{attrs:{id:"函数截流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数截流"}},[n._v("#")]),n._v(" 函数截流")]),n._v(" "),e("ul",[e("li",[n._v("防抖函数原理:规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效")]),n._v(" "),e("li",[n._v("适用场景：\n"),e("ul",[e("li",[n._v("拖拽场景：固定时间内只执行一次，防止超高频次触发位置变动")]),n._v(" "),e("li",[n._v("缩放场景：监控浏览器resize")]),n._v(" "),e("li",[n._v("动画场景：避免短时间内多次触发动画引起性能问题")])])])]),n._v(" "),e("h2",{attrs:{id:"异同点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异同点"}},[n._v("#")]),n._v(" 异同点")]),n._v(" "),e("ul",[e("li",[n._v("相同:在不影响客户体验的前提下,将频繁的回调函数,进行次数缩减.避免大量计算导致的页面卡顿.")]),n._v(" "),e("li",[n._v("不同:防抖是将多次执行合并为最后一次执行，节流是将多次执行变为在规定时间内只执行一次.")])]),n._v(" "),e("h2",{attrs:{id:"防抖代码实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#防抖代码实现"}},[n._v("#")]),n._v(" 防抖代码实现")]),n._v(" "),e("ul",[e("li",[n._v("参考链接：\n"),e("ul",[e("li",[n._v("https://juejin.im/post/5c6bab91f265da2dd94c9f9e")]),n._v(" "),e("li",[n._v("https://github.com/mqyqingfeng/Blog/issues/22")]),n._v(" "),e("li",[n._v("https://www.codercto.com/a/36013.html")])])]),n._v(" "),e("li",[n._v("防抖分为两种:\n"),e("ul",[e("li",[n._v("1)非立即执行版:事件触发->延时->执行回调函数;如果在延时中,继续触发事件,则会重新进行延时.在延时结束后执行回调函数.常见例子:就是input搜索框,客户输完过一会就会自动搜索")]),n._v(" "),e("li",[n._v("2)立即执行版:事件触发->执行回调函数->延时;如果在延时中,继续触发事件,则会重新进行延时.在延时结束后,并不会执行回调函数.常见例子:就是对于按钮防点击.例如点赞,心标,收藏等有立即反馈的按钮,还有下拉加载.")])])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("$('textarea').on('keydown', debounce(ajaxAction, 2500));\n// 保证了回调函数之间的调用间隔，至少是delay\n//简版\nfunction debounce(func, delay){\n  let timer = null // 声明计时器\n  return function(...args){\n    clearTimeout(timer)\n    timer = setTimeout(()=>{\n      func.apply(this, args)\n    }, delay)\n  }\n}\nfunction debounce(fn, delay, immediate){\n  let timer = null\n  return function(...args){\n    clearTimeout(timer)\n    if(immediate){\n      fn.apply(this,args)\n      timer = setTimeout(()=>{\n        timer = null\n      }, delay)\n    }else{\n      timer = setTimeout(()=>{\n        fn.apply(this, args)\n      }, delay)\n    }\n  }\n}\n// 带有立即执行选项的防抖函数\nconst debounce = (func, delay, immediate) => {\n  let timer // 保存定时器\n  // 返回的闭包不要使用箭头函数，这样可以根据实际情况更加灵活的使用this\n  return function(...args){\n    if(timer){\n      clearTimeout(timer) //不管是否立即执行，都要先清空定时器\n    }\n    if(immediate){\n      // 如果是立即执行，则定时器中不再包含回调函数，\n      // 而是在回调函数执行后，仅起到延时和销毁定时器的作用\n      if(!timer) func.apply(this, args)\n      timer = setTimeout(() => {\n        timer = null\n      }, delay)\n    }else{\n      // 如果是非立即执行，则重新设定定时器，并将回调函数放入其中\n      // setTimeout的回调函数用箭头函数来写，可以直接绑定外层的this\n      timer = setTimeout(() => {\n        func.apply(this, args)\n      }, delay)\n    }\n  }\n}\n")])])]),e("h2",{attrs:{id:"截流代码实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#截流代码实现"}},[n._v("#")]),n._v(" 截流代码实现")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 时间戳版\nfunction throttle(fn, delay){\n  let previous = 0\n  return function(...args){\n    let now = Date.now() // 记录此刻触发时的时间戳\n    if(now - previous > delay){// 时间差大于规定时间，则触发\n      fn.apply(this, args)\n      previous = now\n    }\n  }\n}\n// 定时器版\nfunction throttle(fn, delay){\n  let timer\n  return function(...args){\n    if(!timer){\n      timer = setTimeout(() => {\n        timer = null\n        fn.apply(this, args)\n      }, delay)\n    }\n  }\n}\n// 第一种事件会立刻执行，第二种事件会在 n 秒后第一次执行\n// 第一种事件停止触发后没有办法再执行事件，第二种事件停止触发后依然会再执行一次事件\n// 时间戳加定时器版,这版有问题\nfunction throttle(fn, delay){\n  let timer\n  let previous = 0\n  return function(...args){\n    let now = Date.now()\n    if(now - previous >= delay){\n      fn.apply(this, args)\n      previous = now\n    }else{\n      timer = setTimeout(() => {\n        fn.apply(this, args)\n        timer = null\n      }, delay)\n    }\n\n  }\n}\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);