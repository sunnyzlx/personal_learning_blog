(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{396:function(t,e,a){"use strict";a.r(e);var v=a(44),r=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"set与map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set与map"}},[t._v("#")]),t._v(" set与map")]),t._v(" "),a("h3",{attrs:{id:"set操作方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set操作方法"}},[t._v("#")]),t._v(" set操作方法")]),t._v(" "),a("ul",[a("li",[t._v("Set数据结构，类似数组，但成员的值都是唯一，没有重复")]),t._v(" "),a("li",[t._v("Set.prototype.constructor: 构造函数Set")]),t._v(" "),a("li",[t._v("Set.prototype.size")]),t._v(" "),a("li",[t._v("Set.prototype.add(value)")]),t._v(" "),a("li",[t._v("Set.prototype.delete(value)")]),t._v(" "),a("li",[t._v("Set.prototype.has(value)")]),t._v(" "),a("li",[t._v("Set.prototype.clear()")])]),t._v(" "),a("h3",{attrs:{id:"set遍历方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set遍历方法"}},[t._v("#")]),t._v(" set遍历方法")]),t._v(" "),a("ul",[a("li",[t._v("Set.prototype.keys()")]),t._v(" "),a("li",[t._v("Set.prototype.values()")]),t._v(" "),a("li",[t._v("Set.prototype.entries()")]),t._v(" "),a("li",[t._v("Set.prototype.forEach()")])]),t._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),a("ul",[a("li",[t._v("去除数组的重复成员,   [...new Set(array)]或Array.from(new Set(array))")]),t._v(" "),a("li",[t._v("去除字符串里面的重复字符, [...new Set('ababbc')].join('')")]),t._v(" "),a("li",[t._v('向 Set 加入值的时候，不会发生类型转换，所以5和"5"是两个不同的值。')]),t._v(" "),a("li",[t._v("Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（===），主要的区别是向 Set 加入值时认为NaN等于自身，而精确相等运算符认为NaN不等于自身。")]),t._v(" "),a("li",[t._v("在 Set 内部，两个NaN是相等的,两个空对象不相等")])]),t._v(" "),a("h3",{attrs:{id:"map的属性和操作方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map的属性和操作方法"}},[t._v("#")]),t._v(" map的属性和操作方法")]),t._v(" "),a("ul",[a("li",[t._v("Map数据结构，类似对象，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键")]),t._v(" "),a("li",[t._v("Map.prototype.size")]),t._v(" "),a("li",[t._v("Map.prototype.set(key,value)")]),t._v(" "),a("li",[t._v("Map.prototype.get(key)")]),t._v(" "),a("li",[t._v("Map.prototype.has(key)")]),t._v(" "),a("li",[t._v("Map.prototype.delete(key)")]),t._v(" "),a("li",[t._v("Map.prototype.clear()")])]),t._v(" "),a("h3",{attrs:{id:"map的遍历方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map的遍历方法"}},[t._v("#")]),t._v(" map的遍历方法")]),t._v(" "),a("ul",[a("li",[t._v("Map.prototype.keys()")]),t._v(" "),a("li",[t._v("Map.prototype.values()")]),t._v(" "),a("li",[t._v("Map.prototype.entries()")]),t._v(" "),a("li",[t._v("Map.prototype.forEach()")])])])}),[],!1,null,null,null);e.default=r.exports}}]);