(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{422:function(t,e,a){"use strict";a.r(e);var s=a(44),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react之hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react之hook"}},[t._v("#")]),t._v(" react之hook")]),t._v(" "),a("ul",[a("li",[t._v("Hook 是 React 16.8 的新增特性。它可让你在不编写 class 的情况下使⽤用 state 以及其他的 React 特性。")])]),t._v(" "),a("h3",{attrs:{id:"hook的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hook的优点"}},[t._v("#")]),t._v(" hook的优点：")]),t._v(" "),a("ul",[a("li",[t._v("Hook 使你在⾮ class 的情况下可以使用更多的 React 特性")]),t._v(" "),a("li",[t._v("可以在组件之间复用状态逻辑")]),t._v(" "),a("li",[t._v("完全可选的，100% 向后兼容的，Hook 不包含任何破坏性改动")]),t._v(" "),a("li",[t._v("可以将组件拆分为更小的颗粒度，更小的函数(⽐如设置订阅或请求数据)，⽽并⾮强制按照生命周期划分，方便维护管理")])]),t._v(" "),a("h3",{attrs:{id:"hook使用规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hook使用规则"}},[t._v("#")]),t._v(" Hook使用规则")]),t._v(" "),a("ul",[a("li",[t._v("只在最顶层使用 Hook，不要在循环，条件或嵌套函数中调用 Hook")]),t._v(" "),a("li",[t._v("不要在普通的 JavaScript 函数中调用 Hook，\n"),a("ul",[a("li",[t._v("在 React 的函数组件中调用 Hook")]),t._v(" "),a("li",[t._v("在自定义 Hook 中调用其他 Hook")])])])]),t._v(" "),a("h3",{attrs:{id:"自定义hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义hook"}},[t._v("#")]),t._v(" ⾃定义Hook")]),t._v(" "),a("ul",[a("li",[t._v("自定义Hook是一个函数，其名称以 “use” 开头，函数内部可以调用其他的Hook")]),t._v(" "),a("li",[t._v("当我们想在两个函数之间共享逻辑时，可以提取到自定义Hook")])]),t._v(" "),a("h2",{attrs:{id:"usestate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usestate"}},[t._v("#")]),t._v(" useState")]),t._v(" "),a("ul",[a("li",[t._v("useState，返回一个数组，第一个参数是state,第二个参数是执行函数，可以去修改state,返回一个数组的设计理念，命名灵活")])]),t._v(" "),a("h2",{attrs:{id:"useeffect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useeffect"}},[t._v("#")]),t._v(" useEffect")]),t._v(" "),a("ul",[a("li",[t._v("useEffect 可以让你在函数组件中执行副作用操作，数据获取，设置订阅以及手动更改 React 组件中的 DOM 都属于副作⽤")])]),t._v(" "),a("h2",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),a("ul",[a("li",[t._v("useContext,在函数组件中快速的获取context")]),t._v(" "),a("li",[t._v("useReducer,与useState类似，但是可以处理更复杂的state,reducer中分担来一部分状态逻辑")]),t._v(" "),a("li",[t._v("useCallback,缓存函数")]),t._v(" "),a("li",[t._v("useMemo,缓存参数")]),t._v(" "),a("li",[t._v("useRef,在函数组件中使用引用ref")]),t._v(" "),a("li",[t._v("useImperativeHandle，结合forwardRef使用")]),t._v(" "),a("li",[t._v("useLayoutRef,与useEffect基本一样，区别，同步异步")])])])}),[],!1,null,null,null);e.default=o.exports}}]);