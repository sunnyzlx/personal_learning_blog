(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{446:function(e,a,l){"use strict";l.r(a);var t=l(44),s=Object(t.a)({},(function(){var e=this,a=e.$createElement,l=e._self._c||a;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h1",{attrs:{id:"webpack进阶"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack进阶"}},[e._v("#")]),e._v(" webpack进阶")]),e._v(" "),l("h2",{attrs:{id:"sourcemap配置"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#sourcemap配置"}},[e._v("#")]),e._v(" SourceMap配置")]),e._v(" "),l("ul",[l("li",[e._v("SourceMap本质上是一个映射关系")]),e._v(" "),l("li",[e._v("为了更容易地追踪error和warning，JavaScript提供了source map功能，可以将编译后的代码映射回原始源代码")]),e._v(" "),l("li",[e._v("SourceMap会明确的告诉你，错误来自于哪个源文件，而不是打包编译后的文件")])]),e._v(" "),l("h3",{attrs:{id:"用法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[e._v("#")]),e._v(" 用法")]),e._v(" "),l("ul",[l("li",[e._v("配置 devtool: 'sorce-map'")]),e._v(" "),l("li",[e._v("选择一种 source map 格式来增强调试过程。不同的值会明显影响到构建(build)和重新构建(rebuild)的速度")]),e._v(" "),l("li",[e._v("source-map, 会额外生成一个映射文件，xxx.js.map，报错精确，第几行第几列 ----基础")]),e._v(" "),l("li",[e._v("inline-source-map, 会将映射文件以base URL(字符串)的方式打包进bundle.js中，报错精确，第几行第几列，但比较耗费性能")]),e._v(" "),l("li",[e._v("cheap-source-map,\n"),l("ul",[l("li",[e._v("报错不精确，只精确到行，不精确到列")]),e._v(" "),l("li",[e._v("且报错只针对业务代码，不会管第三方模块代码，如loader的代码")])])]),e._v(" "),l("li",[e._v("cheap-module-source-map\n"),l("ul",[l("li",[e._v("报错不仅管业务代码，也会管第三方模块代码，如loader的代码")])])]),e._v(" "),l("li",[e._v("eval\n"),l("ul",[l("li",[e._v("打包速度最快，性能最好的一种方式，也不会单独生成一个映射文件，也不会生成base URL, 它是通过eval这种JS执行形式来生成sourceMap的这种映射关系的，但对于一些复杂代码，提示内容可能并不全面")])])])]),e._v(" "),l("h3",{attrs:{id:"最佳实践"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践"}},[e._v("#")]),e._v(" 最佳实践")]),e._v(" "),l("ul",[l("li",[e._v("开发环境 'cheap-module-eval-source-map', 报错提示全面，打包速度也很快")]),e._v(" "),l("li",[e._v("生产环境 'cheap-module-source-map'  提示效果会更好")])]),e._v(" "),l("h2",{attrs:{id:"使用webpackdevserver提升开发效率"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#使用webpackdevserver提升开发效率"}},[e._v("#")]),e._v(" 使用WebpackDevServer提升开发效率")]),e._v(" "),l("ul",[l("li",[e._v("shell命令添加--watch 参数，可以监听源文件改动，并帮助我们自动打包")]),e._v(" "),l("li",[e._v("devServer\n"),l("ul",[l("li",[e._v("监听源文件改动，帮助我们自动打包")]),e._v(" "),l("li",[e._v("帮助我们自动刷新浏览器")]),e._v(" "),l("li",[e._v("帮助我们开启一个调试server，方便我们发送ajax请求")]),e._v(" "),l("li",[e._v("帮助我们自动打开浏览器 --open")]),e._v(" "),l("li",[e._v("帮助我们做一个proxy接口代理，方便做跨域请求转发")]),e._v(" "),l("li",[e._v("帮助我们开启热模块替换")]),e._v(" "),l("li",[e._v("将打包生成的文件放到内存中，提升打包速度")])])])]),e._v(" "),l("h2",{attrs:{id:"hot-module-replacement-模块热更新"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#hot-module-replacement-模块热更新"}},[e._v("#")]),e._v(" Hot Module Replacement 模块热更新")]),e._v(" "),l("ul",[l("li",[e._v("优点： 写css时，只更新修改的css, 而不会去重新加载html和js, 方便快速调试")]),e._v(" "),l("li",[e._v("如果不用HMR，整个页面都会重新刷新")]),e._v(" "),l("li",[e._v("如何对js修改也实现HMR功能")])]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("devServer: {\n  contentBase: './dist',\n  host: '0.0.0.0',\n  port: '8089',\n  open: true,\n  hot: true, //开启热模块替换功能HMR\n  hotOnly: true \n  //当热更新失败时，默认情况下devServer会帮助你重新刷新浏览器\n  //开启hotOnly后，就阻止了devServer重新刷新浏览器的行为\n  //当HMR失效时，就让ta失效，不要做其他额外的处理了\n}\n")])])]),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("if(module.hot){\n  module.hot.accept('./number.js', ()=>{\n    document.body.removeChild(document.getElementById('number'))\n    number()\n  })\n}\n// 监听某个js文件，当文件发生变动时，去执行想要更新的操作\n")])])]),l("h2",{attrs:{id:"使用babel处理es6语法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#使用babel处理es6语法"}},[e._v("#")]),e._v(" 使用Babel处理ES6语法")]),e._v(" "),l("ul",[l("li",[e._v("babel-loader 帮助webpack做打包的一个工具，只是将babel与webpack之间的通信打开，并不会去转换语法")]),e._v(" "),l("li",[e._v("@babel/core babel的一个核心库，可以让babel去识别JS代码里的内容，然后把JS代码转换成AST抽象语法树")]),e._v(" "),l("li",[e._v("@babel/preset-env 帮助webapck将ES6语法转换为ES5语法，包含了所有ES6转ES5的转换规则，只转换了语法")]),e._v(" "),l("li",[e._v("@babel/polyfill 一些函数和变量是不会做转换的，例如Promise对象和map方法，需要去对这些低版本浏览器不支持的函数和变量做补充注入，useBuiltIns: 'usage'，按需引用，只对用到的函数和变量做补充，而不是全部，避免将打包后的文件体积变得很大，影响打包性能")]),e._v(" "),l("li",[e._v("@babel/polyfill会对全局范围（global scope）造成污染，如果我们构建的是一个应用程序，业务代码，我们只需安装 @babel/polyfill，然后按需引用即可")]),e._v(" "),l("li",[e._v("options对象中的内容，也可以写到.babelrc文件中")])]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("npm install --save-dev babel-loader @babel/core  @babel/preset-env\nnpm install --save @babel/polyfill\n在代码中引入 import '@babel/polyfill' //@babel/polyfill并没有向代码中导入任何的内容，而是在window对象上挂载了一些全局变量，如Promise， Window.Promise\n{\n  test: '/\\.js?x$/',\n  exclude: /(node_modules|bower_components)/,\n  use: {\n    loader: 'babel-loader',\n    options: {\n      targets: {\n        chrome: '67'\n      },\n      presets: [['@babel/preset-env', {\n        useBuiltIns: 'usage' \n        //添加该选项之后，就不需要在项目中import '@babel/polyfill'了，ta会帮助我们自动引入\n      }]]\n    }\n}\n")])])]),l("ul",[l("li",[e._v("对于软件库/工具，我们可以使用@babel/plugin-transform-runtime")]),e._v(" "),l("li",[e._v("@babel/plugin-transform-runtime ?? @babel/polyfill会造成全局污染，而@babel/plugin-transform-runtime会以闭包的形式向组件注入内容，不会造成全局污染，比较适合开发第三方类库，或工具库，UI库等")]),e._v(" "),l("li",[e._v("babel的学习，是个大部头，以后可以深入了解一下")])]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v('npm install --save-dev @babel/plugin-transform-runtime\nnpm install --save @babel/runtime\nnpm install --save @babel/runtime-corejs2\n{\n  "plugins": [\n    [\n      "@babel/plugin-transform-runtime",\n      {\n        "absoluteRuntime": false,\n        "corejs": 2,\n        "helpers": true,\n        "regenerator": true,\n        "useESModules": false\n      }\n    ]\n  ]\n}\n')])])]),l("h2",{attrs:{id:"配置react代码的打包"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#配置react代码的打包"}},[e._v("#")]),e._v(" 配置React代码的打包")]),e._v(" "),l("ul",[l("li",[e._v("presets是一个数组，它的执行顺序，从下往上，从右往左")])]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("npm install --save react react-dom\nnpm install --save-dev @babel/preset-react\npresets: [\n    ['@babel/preset-env', {\n      useBuiltIns: 'usage'\n    }]，\n    '@babel/preset-react'\n  ]\n// 先使用@babel/preset-react转换react代码，\n// 再使用@babel/preset-env转换ES6 代码\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);