(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{393:function(t,e,o){"use strict";o.r(e);var n=o(44),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"原型链"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),o("ul",[o("li",[t._v("每个对象都有__proto__，指向生成该对象的构造函数的原型。")]),t._v(" "),o("li",[t._v("函数的__proto__, 指向Function.prototype,")]),t._v(" "),o("li",[t._v("构造函数也是函数，构造函数的__proto__, 指向Function.prototype")]),t._v(" "),o("li",[t._v("Function.prototype属性是一个对象，而对象的__proto__，指向生成该对象的构造函数的原型，所以，Function.prototype._"),o("em",[t._v("proto")]),t._v("_=== Object.prototype")])]),t._v(" "),o("h2",{attrs:{id:"_1-es6-extends-继承做了什么操作"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-es6-extends-继承做了什么操作"}},[t._v("#")]),t._v(" 1.ES6 extends 继承做了什么操作")]),t._v(" "),o("ul",[o("li",[t._v("https://juejin.im/post/5c433e216fb9a049c15f841b")]),t._v(" "),o("li",[t._v("1.把子类构造函数(Child)的原型(_"),o("em",[t._v("proto")]),t._v("_)指向了父类构造函数(Parent)，继承父类的静态方法")]),t._v(" "),o("li",[t._v("2.把子类实例child的原型对象(Child.prototype) 的原型(_"),o("em",[t._v("proto")]),t._v("_)指向了父类parent的原型对象(Parent.prototype)，继承父类的方法。")]),t._v(" "),o("li",[t._v("3.子类构造器里调用父类构造器，继承父类的属性。")])]),t._v(" "),o("h3",{attrs:{id:"es6实现继承"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#es6实现继承"}},[t._v("#")]),t._v(" ES6实现继承")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("// ES6\nclass Parent{\n    constructor(name){\n        this.name = name;\n    }\n    static sayHello(){\n        console.log('hello');\n    }\n    sayName(){\n        console.log('my name is ' + this.name);\n        return this.name;\n    }\n}\nclass Child extends Parent{\n    constructor(name, age){\n        super(name);\n        this.age = age;\n    }\n    sayAge(){\n        console.log('my age is ' + this.age);\n        return this.age;\n    }\n}\n\nlet parent = new Parent('Parent');\nlet child = new Child('Child', 18);\nconsole.log('parent: ', parent); // parent:  Parent {name: \"Parent\"}\nParent.sayHello(); // hello\nparent.sayName(); // my name is Parent\nconsole.log('child: ', child); // child:  Child {name: \"Child\", age: 18}\nChild.sayHello(); // hello\nchild.sayName(); // my name is Child\nchild.sayAge(); // my age is 18\n\n")])])]),o("ul",[o("li",[t._v("其中这段代码里有两条原型链，不信看具体代码")])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("// 1、构造器原型链\nChild.__proto__ === Parent; // true\nParent.__proto__ === Function.prototype; // true\nFunction.prototype.__proto__ === Object.prototype; // true\nObject.prototype.__proto__ === null; // true\n// 2、实例原型链\nchild.__proto__ === Child.prototype; // true\nChild.prototype.__proto__ === Parent.prototype; // true\nParent.prototype.__proto__ === Object.prototype; // true\nObject.prototype.__proto__ === null; // true\n\n")])])]),o("h3",{attrs:{id:"es5实现寄生组合式继承"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#es5实现寄生组合式继承"}},[t._v("#")]),t._v(" ES5实现寄生组合式继承")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("// ES5 实现ES6 extends的例子\nfunction Parent(name){\n    this.name = name;\n}\nParent.sayHello = function(){\n    console.log('hello');\n}\nParent.prototype.sayName = function(){\n    console.log('my name is ' + this.name);\n    return this.name;\n}\n\nfunction Child(name, age){\n    // 相当于super\n    Parent.call(this, name);\n    this.age = age;\n}\n// new\nfunction object(){\n    function F() {}\n    F.prototype = proto;\n    return new F();\n}\nfunction _inherits(Child, Parent){\n    // Object.create\n    Child.prototype = Object.create(Parent.prototype);\n    // __proto__\n    // Child.prototype.__proto__ = Parent.prototype;\n    Child.prototype.constructor = Child;\n    // ES6\n    // Object.setPrototypeOf(Child, Parent);\n    // __proto__\n    Child.__proto__ = Parent;\n}\n_inherits(Child,  Parent);\nChild.prototype.sayAge = function(){\n    console.log('my age is ' + this.age);\n    return this.age;\n}\nvar parent = new Parent('Parent');\nvar child = new Child('Child', 18);\nconsole.log('parent: ', parent); // parent:  Parent {name: \"Parent\"}\nParent.sayHello(); // hello\nparent.sayName(); // my name is Parent\nconsole.log('child: ', child); // child:  Child {name: \"Child\", age: 18}\nChild.sayHello(); // hello\nchild.sayName(); // my name is Child\nchild.sayAge(); // my age is 18\n")])])]),o("h3",{attrs:{id:"new、object-create和object-setprototypeof可以设置-proto"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#new、object-create和object-setprototypeof可以设置-proto"}},[t._v("#")]),t._v(" new、Object.create和Object.setPrototypeOf可以设置__proto__")]),t._v(" "),o("ul",[o("li",[t._v("模拟实现 new 操作符")]),t._v(" "),o("li",[t._v("https://juejin.im/post/5bde7c926fb9a049f66b8b52")])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("function newOperator(ctor){\n  if(typeof ctor !== 'function'){\n    throw TypeError('not function')\n  }\n  newOperator.target = ctor;\n  var newObj = Object.create(ctor.prototype)\n  var argsArr = [].slice.call(arguments, 1)\n  var res = ctor.apply(newObj, argsArr)\n  if((typeof res === 'object'&& res !== null) || typeof res === 'function'){\n    return res\n  }\n  return newObj;\n}\n")])])]),o("ul",[o("li",[t._v("模拟实现Object.create()")])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("if(typeof Object.create !== 'function'){\n  Object.create = function(proto){\n    function F(){}\n    F.prototype = proto;\n    return new F()\n  }\n}\n")])])]),o("ul",[o("li",[t._v("模拟实现Object.setPrototypeOf()")])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("`ployfill`\n// 仅适用于Chrome和FireFox，在IE中不工作：\nObject.setPrototypeOf = Object.setPrototypeOf || function(obj, proto){\n  obj.__proto__ = proto;\n  return obj;\n}\n")])])]),o("h2",{attrs:{id:"_3"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3"}},[t._v("#")]),t._v(" 3.")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("var F = function () {}\nObject.prototype.a = function () {}\nFunction.prototype.b = function () {}\n\nvar f = new F()\n// 请问f有方法a  方法b吗\n")])])]),o("ul",[o("li",[o("p",[t._v("1.实例f的原型链：")]),t._v(" "),o("ul",[o("li",[t._v("f._"),o("em",[t._v("proto")]),t._v("_ === F.prototype; //true")]),t._v(" "),o("li",[t._v("F.prototype._"),o("em",[t._v("proto")]),t._v("_ === Object.prototype; //true")]),t._v(" "),o("li",[t._v("Object.prototype._"),o("em",[t._v("proto")]),t._v("_ === null; //true")])])]),t._v(" "),o("li",[o("p",[t._v("2.构造器F的原型链")]),t._v(" "),o("ul",[o("li",[t._v("F.prototype.constructor === F; // true")]),t._v(" "),o("li",[t._v("F._"),o("em",[t._v("proto")]),t._v("_ === Function.prototype; //true")]),t._v(" "),o("li",[t._v("Function.prototype._"),o("em",[t._v("proto")]),t._v("_ === Object.prototype; //true")]),t._v(" "),o("li",[t._v("Object.prototype._"),o("em",[t._v("proto")]),t._v("_ === null; //true")])])]),t._v(" "),o("li",[o("p",[t._v("3.f的__proto__指向F.prototype，F.prototype.__proto__指向Object.prototype，所以f 可以取到a方法， 由于f的原型链上没经过Function.prototype，所以取不到b方法。")])]),t._v(" "),o("li",[o("p",[t._v("4.由于构造函数F是由Function new出来的，所以F.__proto__指向Function.prototype，所以F函数可以取到b方法。")])])]),t._v(" "),o("h2",{attrs:{id:"_4"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_4"}},[t._v("#")]),t._v(" 4.")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("function Person(){}\n\nlet p1 = new Person()\nlet p2 = new Person()\nlet obj = {}\n// 写出 p1  p2  Person  Function   obj   Object等的原型链\n")])])]),o("ul",[o("li",[t._v("实例p1,p2原型链：\n"),o("ul",[o("li",[t._v("p1._"),o("em",[t._v("proto")]),t._v("_ === Person.prototype")]),t._v(" "),o("li",[t._v("p2._"),o("em",[t._v("proto")]),t._v("_ === Person.prototype")]),t._v(" "),o("li",[t._v("Person.prototype._"),o("em",[t._v("proto")]),t._v("_ === Object.prototype")]),t._v(" "),o("li",[t._v("Object.prototype._"),o("em",[t._v("proto")]),t._v("_ === null")])])]),t._v(" "),o("li",[t._v("构造器Person原型链\n"),o("ul",[o("li",[t._v("Person._"),o("em",[t._v("proto")]),t._v("_ === Function.prototype")]),t._v(" "),o("li",[t._v("Function.prototype._"),o("em",[t._v("proto")]),t._v("_  === Object.prototype")]),t._v(" "),o("li",[t._v("Object.prototype._"),o("em",[t._v("proto")]),t._v("_ === null")])])]),t._v(" "),o("li",[t._v("构造器Function原型链\n"),o("ul",[o("li",[t._v("Function._"),o("em",[t._v("proto")]),t._v("_ === Function.prototype")]),t._v(" "),o("li",[t._v("Function.prototype._"),o("em",[t._v("proto")]),t._v("_ === Object.prototype")]),t._v(" "),o("li",[t._v("Object.prototype._"),o("em",[t._v("proto")]),t._v("_ === null")])])]),t._v(" "),o("li",[t._v("obj原型链\n"),o("ul",[o("li",[t._v("obj._"),o("em",[t._v("proto")]),t._v("_ === Object.prototype")]),t._v(" "),o("li",[t._v("Object.prototype._"),o("em",[t._v("proto")]),t._v("_ === null")])])]),t._v(" "),o("li",[t._v("构造器Object原型链\n"),o("ul",[o("li",[t._v("Object._"),o("em",[t._v("proto")]),t._v("_ === Function.prototype")]),t._v(" "),o("li",[t._v("Function.prototype._"),o("em",[t._v("proto")]),t._v("_ === Object.prototype")]),t._v(" "),o("li",[t._v("Object.prototype._"),o("em",[t._v("proto")]),t._v("_ === null\n"),o("img",{attrs:{src:t.$withBase("/assets/prototype.png")}})])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);