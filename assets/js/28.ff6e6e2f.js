(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{386:function(a,e,t){"use strict";t.r(e);var n=t(44),r=Object(n.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"字符串类高频面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串类高频面试题"}},[a._v("#")]),a._v(" 字符串类高频面试题")]),a._v(" "),t("h2",{attrs:{id:"_1-parsefloat-parseint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-parsefloat-parseint"}},[a._v("#")]),a._v(" 1.parseFloat,parseInt")]),a._v(" "),t("ul",[t("li",[a._v("https://juejin.im/post/5dbff8735188252ddb2fd25e")]),a._v(" "),t("li",[a._v("['1', '2', '3'].map(parseInt)的输出结果是什么？['1', '2', '3'].fliter(parseInt)的输出结果是什么？")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("['1', '2', '3'].map(parseInt)\n// [1, NaN, NaN]\n['1', '2', '3'].map(parseFloat)\n// [1, 2, 3]\n['1', '2', '3'].filter(parseInt)\n// [\"1\"]\n['1', '2', '3'].filter(parseFloat)\n// [\"1\", \"2\", \"3\"]\n")])])]),t("ul",[t("li",[a._v("一个小的知识点：如何快速将一个字符串数组转化为数字类型的数组")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("['1', '2', '3'].map(parseFloat)\n['1', '2', '3'].map(Number)\n")])])]),t("h2",{attrs:{id:"_2-解析-url-params-为对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-解析-url-params-为对象"}},[a._v("#")]),a._v(" 2.解析 URL Params 为对象")]),a._v(" "),t("p",[t("strong",[a._v("let url = 'http://www.domain.com/?user=anonymous&id=123&id=456&city=%E5%8C%97%E4%BA%AC&enabled';")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/* 结果\n{ user: 'anonymous',\n  id: [ 123, 456 ], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型\n  city: '北京', // 中文需解码\n  enabled: true, // 未指定值得 key 约定为 true\n}\n*/\n\nfunction parseParam(url) {\n  const paramsStr = /.+\\?(.+)$/.exec(url)[1]; // 将 ? 后面的字符串取出来\n  const paramsArr = paramsStr.split('&'); // 将字符串以 & 分割后存到数组中\n  let paramsObj = {}; // 将 params 存到对象中\n  paramsArr.forEach(param => {\n    if (/=/.test(param)) { // 处理有 value 的参数\n      let [key, val] = param.split('='); // 分割 key 和 value\n      val = decodeURIComponent(val); // 解码\n      val = /^\\d+$/.test(val) ? parseFloat(val) : val; // 判断是否转为数字\n\n      if (paramsObj.hasOwnProperty(key)) { // 如果对象有 key，则添加一个值\n        paramsObj[key] = [].concat(paramsObj[key], val);\n      } else { // 如果对象没有这个 key，创建 key 并设置值\n        paramsObj[key] = val;\n      }\n    } else { // 处理没有 value 的参数\n      paramsObj[param] = true;\n    }\n  })\n\n  return paramsObj;\n}\n\n//将url对象解析为参数字符串\nlet params = new URLSearchParams(search)\nconsole.log(params)\nconsole.log(params.toString()) \n")])])]),t("h2",{attrs:{id:"_3-模板引擎实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-模板引擎实现"}},[a._v("#")]),a._v(" 3.模板引擎实现")]),a._v(" "),t("p",[t("strong",[a._v("render(template, data); // 我是姓名，年龄18，性别男")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let template = '我是{{name}}，年龄{{age}}，性别{{sex}}';\nlet data = {\n  name: '张三',\n  age: 18,\n  sex: '男'\n}\n\nfunction render(template, data){\n  let reg = /\\{\\{(\\w+)\\}\\}/g  // 模板字符串正则\n  const ret = template.replace(reg, (match, $1)=>{\n    console.log(match,$1)\n    return data[$1]\n  })\n  return ret\n}\n")])])]),t("h2",{attrs:{id:"_4-转化为驼峰命名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-转化为驼峰命名"}},[a._v("#")]),a._v(" 4.转化为驼峰命名")]),a._v(" "),t("p",[t("strong",[a._v('var s1 = "get-element-by-id"，转化为驼峰命名')])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function translate(s){\n  let reg = /-(\\w)/g\n  let ret = s1.replace(reg, (match, $1) => {\n    console.log(match,$1)\n    return $1.toUpperCase()\n  })\n  return ret\n}\n\nfunction translate(s1){\n  let reg = /-(\\w)/g\n  let s = s1.slice(0,1).toUpperCase()\n  let s2 = s1.slice(1).replace(reg, (match, $1) => {\n    console.log(match,$1)\n    return $1.toUpperCase()\n  })\n  return s.concat(s2)\n}\n")])])]),t("h3",{attrs:{id:"_4-查找字符串中出现最多的字符和个数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-查找字符串中出现最多的字符和个数"}},[a._v("#")]),a._v(" 4.查找字符串中出现最多的字符和个数 ？？？")]),a._v(" "),t("ul",[t("li",[a._v("例: abbcccddddd -> 字符最多的是d，出现了5次")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let str = \"abcabcabcbbccccc\";\nlet num = 0;\nlet char = '';\n\n // 使其按照一定的次序排列\nstr = str.split('').sort().join('');\n// \"aaabbbbbcccccccc\"\n\n// 定义正则表达式,表示重复字符\nlet re = /(\\w)\\1+/g;\nstr.replace(re,($0,$1) => {\n    if(num < $0.length){\n        num = $0.length;\n        char = $1;        \n    }\n});\nconsole.log(`字符最多的是${char}，出现了${num}次`);\n")])])]),t("h3",{attrs:{id:"_5-字符串查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-字符串查找"}},[a._v("#")]),a._v(" 5.字符串查找")]),a._v(" "),t("ul",[t("li",[a._v("请使用最基本的遍历来实现判断字符串 a 是否被包含在字符串 b 中，并返回第一次出现的位置（找不到返回 -1）")]),a._v(" "),t("li",[a._v("对一个整数连续两次二进制否运算，得到它自身")]),a._v(" "),t("li",[a._v("所有的位运算都只对整数有效。二进制否运算遇到小数时，也会将小数部分舍去，只保留整数部分。所以，对一个小数连续进行两次二进制否运算，能达到取整效果")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("~~3 // 3\n~~2.9 // 2\n~~47.11 // 47\n~~1.9999 // 1\n\na='34';b='1234567'; // 返回 2\na='35';b='1234567'; // 返回 -1\na='355';b='12354355'; // 返回 5\nisContain(a,b);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function isContain(a, b) {\n  for (let i in b) {\n    if (a[0] === b[i]) {\n      let tmp = true;\n      for (let j in a) {\n        if (a[j] !== b[~~i + ~~j]) {\n          \x3c!-- 使用二进制否运算取整，是所有取整方法中最快的一种 --\x3e\n          tmp = false;\n        }\n      }\n      if (tmp) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n")])])]),t("h3",{attrs:{id:"_6-实现千位分隔符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-实现千位分隔符"}},[a._v("#")]),a._v(" 6.实现千位分隔符")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 保留三位小数\nparseToMoney(1234.56); // return '1,234.56'\nparseToMoney(123456789); // return '123,456,789'\nparseToMoney(1087654.321); // return '1,087,654.321'\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function parseToMoney(num) {\n  num = parseFloat(num.toFixed(3));\n  let [integer, decimal] = String.prototype.split.call(num, '.');\n  integer = integer.replace(/\\d(?=(\\d{3})+$)/g, '$&,');\n  return integer + '.' + (decimal ? decimal : '');\n}\n// 正则表达式(运用了正则的前向声明和反前向声明):\nfunction parseToMoney(str){\n   // 仅仅对位置进行匹配\n   let re = /(?=(?!\\b)(\\d{3})+$)/g; \n   return str.replace(re,','); \n}\n")])])]),t("h3",{attrs:{id:"_7-判断是否是电话号码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-判断是否是电话号码"}},[a._v("#")]),a._v(" 7.判断是否是电话号码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function isPhone(tel) {\n    var regx = /^1[34578]\\d{9}$/;\n    return regx.test(tel);\n}\n")])])]),t("h3",{attrs:{id:"_8-验证是否是邮箱"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-验证是否是邮箱"}},[a._v("#")]),a._v(" 8.验证是否是邮箱")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function isEmail(email) {\n    var regx = /^([a-zA-Z0-9_\\-])+@([a-zA-Z0-9_\\-])+(\\.[a-zA-Z0-9_\\-])+$/;\n    return regx.test(email);\n}\n")])])]),t("h3",{attrs:{id:"_9-验证是否是身份证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-验证是否是身份证"}},[a._v("#")]),a._v(" 9.验证是否是身份证")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function isCardNo(number) {\n    var regx = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n    return regx.test(number);\n}\n")])])]),t("h3",{attrs:{id:"_10-判断一个单词是否是回文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-判断一个单词是否是回文"}},[a._v("#")]),a._v(" 10.判断一个单词是否是回文？")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function checkPalindrome(str){\n  return str === str.split('').reverse().join('');\n}\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);