(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{459:function(e,t,v){"use strict";v.r(t);var l=v(44),i=Object(l.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:""}},[v("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),v("ul",[v("li",[e._v("vue的defineProperty如何实现双向数据绑定，vue3.0换成proxy的好处？")]),e._v(" "),v("li",[e._v("重构项目：\n"),v("ul",[v("li",[e._v("目标：框架迁移，性能优化，服务拆分，业务逻辑的升级：新增了一个鉴权系统")]),e._v(" "),v("li",[e._v("三个阶段\n"),v("ul",[v("li",[e._v("阶段一，满足基本的要求，把react替换为vue")]),e._v(" "),v("li",[e._v("阶段二，接口层面的重构，把后端接口重构，做拆分与合并，前端也要做相应的处理，业务逻辑上的升级，新增了一个鉴权系统")]),e._v(" "),v("li",[e._v("阶段三，性能优化层面")])])]),e._v(" "),v("li",[e._v("做框架迁移，对比选型，要说出两个框架的核心区别：\n"),v("ul",[v("li",[e._v("同： 两个都是单向数据流，都是虚拟dom")]),e._v(" "),v("li",[e._v("异：\n"),v("ul",[v("li",[e._v("模版语法：vue是普通的模版语法，上手更容易，变量用{{}},react是jsx语法，核心思想是all in js,有学习成本")]),e._v(" "),v("li",[e._v("数据驱动方面，vue是双向数据绑定，react强调数据的稳定性，而vue强调数据的动态这样一个特性，响应式数据更新")]),e._v(" "),v("li",[e._v("diff算法，都是匹配同级dom结点的这样一个diff, react是从左到右匹配相同结点，vue是先头尾比较四种，再比较key，根据旧结点的key去生成一个hash表，新结点的key直接去hash表中去寻找有没有对应的key,如果有，直接把这个结点更新到对应的位置，这样就可以直接复用结点，如果没有key,就需要在原结点的位置把新结点插入进去，这样就需要重新创建dom,所以key的作用就是可以复用原来的结点，放到更新的位置，而不是重新创建一个新的结点")]),e._v(" "),v("li",[e._v("vue的diff更优越，它diff的匹配方式性能更好，且vue中每个data都有一个watcher, 当数据变化时，watcher已经知道是哪个组件发生变化，它已经能精准的定位到组件了， react是从整个domtree，再到 componenttree，再到elementtree,他是同级的一层一层去比对的，")]),e._v(" "),v("li",[e._v("vue已经有了watcher的监听机制，为什么还要有diff算法？ 大量的细粒度的watcher会占用大量的内存，会造成大量的性能消耗，所以需要控制watcher的粒度，所以vue在组件内diff")])])])])])])])])])}),[],!1,null,null,null);t.default=i.exports}}]);