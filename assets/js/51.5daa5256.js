(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{409:function(r,t,a){"use strict";a.r(t);var e=a(44),n=Object(e.a)({},(function(){var r=this,t=r.$createElement,a=r._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("h1",{attrs:{id:"二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[r._v("#")]),r._v(" 二叉树")]),r._v(" "),a("ul",[a("li",[r._v("树其实是链表结构的一种延伸，有根结点，左子树，有子树")]),r._v(" "),a("li",[r._v("树是一种递归结构，多用递归和递推")])]),r._v(" "),a("h3",{attrs:{id:"二叉树的遍历逻辑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的遍历逻辑"}},[r._v("#")]),r._v(" 二叉树的遍历逻辑")]),r._v(" "),a("ul",[a("li",[r._v("前序遍历：自->left->right")]),r._v(" "),a("li",[r._v("中序遍历: left->自->right")]),r._v(" "),a("li",[r._v("后序遍历: left->right->自")])]),r._v(" "),a("h3",{attrs:{id:"二叉树的前序遍历-144"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的前序遍历-144"}},[r._v("#")]),r._v(" 二叉树的前序遍历(144)")]),r._v(" "),a("ul",[a("li",[r._v("递归")])]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v("var preorderTraversal = function(root, arr=[]) {\n  if(root){\n    arr.push(root.val)\n    preorderTraversal(root.left, arr)\n    preorderTraversal(root.right, arr)\n  }\n  return arr\n};\n")])])]),a("ul",[a("li",[r._v("迭代")])]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v("var preorderTraversal = function(root) {                                                                                                                                                                                         \n  let stack = []\n  let result = []\n  let cur = root\n  while(cur || stack.length>0){\n    while(cur){\n      result.push(cur.val)\n      stack.push(cur)\n      cur = cur.left\n    }\n    cur = stack.pop()\n    cur = cur.right\n  }\n  return result\n};\n")])])]),a("h3",{attrs:{id:"二叉树的中序遍历-94"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的中序遍历-94"}},[r._v("#")]),r._v(" 二叉树的中序遍历(94)")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v("var inorderTraversal = function(root, arr=[]) {\n  if(root){\n    inorderTraversal(root.left, arr)\n    arr.push(root.val)\n    inorderTraversal(root.right, arr)\n  }\n  return arr\n};\nvar inorderTraversal = function(root) {\n  let result = []\n  let stack = []\n  let cur = root\n  while(cur || stack.length>0){\n    while(cur){\n      stack.push(cur)\n      cur = cur.left\n    }\n    cur = stack.pop()\n    result.push(cur.val)\n    cur = cur.right\n  }\n  return result\n};\n")])])]),a("h3",{attrs:{id:"二叉树的后序遍历-145"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的后序遍历-145"}},[r._v("#")]),r._v(" 二叉树的后序遍历(145)")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v("var postorderTraversal = function(root, arr=[]) {\n  if(root){\n    postorderTraversal(root.left,arr)\n    postorderTraversal(root.right, arr)\n    arr.push(root.val)\n  }\n  return arr\n};\n")])])]),a("ul",[a("li",[r._v("迭代")])]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v("var postorderTraversal = function(root) {\n  let stack = []\n  let result = []\n  let cur = root\n  while(cur || stack.length>0){\n    if(cur){\n      result.push(cur.val)\n      stack.push(cur)\n      cur = cur.right\n    }else{\n      cur = stack.pop()\n      cur = cur.left\n    }\n  }\n  return result.reverse()\n};\n")])])]),a("h2",{attrs:{id:"二叉搜索树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树"}},[r._v("#")]),r._v(" 二叉搜索树")]),r._v(" "),a("ul",[a("li",[r._v("节点的值大于left所有的值，小于right所有的值")])]),r._v(" "),a("h3",{attrs:{id:"相同的树-100"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相同的树-100"}},[r._v("#")]),r._v(" 相同的树(100)")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v("var isSameTree = function(p, q) {\n  if(p==null&&q==null){\n    return true\n  }\n  if(p==null||q==null){\n    return false\n  }  \n  if(p.val!==q.val){\n    return false\n  }\n  //p和q的值相等，需要递归判定左右子树\n   return isSameTree(p.left,q.left) && isSameTree(p.right, q.right)\n")])])]),a("h3",{attrs:{id:"反转二叉树-226"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反转二叉树-226"}},[r._v("#")]),r._v(" 反转二叉树（226）")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v("var invertTree = function(root) {\n  //递归，终止条件\n  if(root==null){\n    return root\n  }\n  [root.left,root.right] = [invertTree(root.right),invertTree(root.left)]\n  return root\n};\n")])])]),a("h3",{attrs:{id:"二叉树的最大深度-104"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的最大深度-104"}},[r._v("#")]),r._v(" 二叉树的最大深度（104）")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v("var maxDepth = function(root) {\n  if(root==null){\n    return 0\n  }\n  return Math.max(maxDepth(root.left), maxDepth(root.right))+1\n};\n")])])]),a("h3",{attrs:{id:"二叉搜索树的最近公共祖先-235"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树的最近公共祖先-235"}},[r._v("#")]),r._v(" 二叉搜索树的最近公共祖先（235）")]),r._v(" "),a("ul",[a("li",[r._v("迭代")])]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v("var lowestCommonAncestor = function(root, p, q) {\n  if(p.val>root.val&&q.val>root.val){\n    return lowestCommonAncestor(root.right, p,q)\n  }else if(p.val<root.val && q.val<root.val){\n    return lowestCommonAncestor(root.left, p,q)\n  }else{\n    return root\n  }\n};\n")])])]),a("ul",[a("li",[r._v("递归")])]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v("var lowestCommonAncestor = function(root, p, q) {\n  while(root){\n    if(p.val>root.val&&q.val>root.val){\n      root = root.right\n    }else if(p.val<root.val&&q.val<root.val){\n      root = root.left\n    }else{\n      return root\n    }\n  }\n};\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);