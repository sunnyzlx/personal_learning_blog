(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{464:function(n,e,t){"use strict";t.r(e);var l=t(44),s=Object(l.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[n._v("#")]),n._v(" 设计模式")]),n._v(" "),t("h2",{attrs:{id:"工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[n._v("#")]),n._v(" 工厂模式")]),n._v(" "),t("ul",[t("li",[n._v("特点\n"),t("ul",[t("li",[n._v("将new操作单独封装（new操作主要出现在面向对象创建实例的过程中）")]),n._v(" "),t("li",[n._v("遇到new时，就该考虑是否要使用工厂模式")])])]),n._v(" "),t("li",[n._v("示例\n"),t("ul",[t("li",[n._v("你去购买汉堡，直接点餐取餐，不用自己做")]),n._v(" "),t("li",[n._v("商店要’封装‘做汉堡的工作，做好直接给买者")])])]),n._v(" "),t("li",[n._v("代码演示\n"),t("ul",[t("li",[n._v("初始化一个产品类，再初始化一个工厂类，产品要给外部的人来用，但不直接暴露，而是通过工厂类将其暴露")])])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Product{\n  constructor(name){\n    this.name = name\n  }\n  init(){\n    console.log('init')\n  }\n  fn1(){\n    console.log('fn1')\n  }\n  fn2(){\n    console.log('fn2')\n  }\n}\nclass Factor{\n  create(name){\n    return new Product(name)\n  }\n}\nlet factor = new Factor()\nlet product = factor.create('hahah')\nproduct.init()\nproduct.fn1()\n")])])]),t("ul",[t("li",[n._v("应用场景\n"),t("ul",[t("li",[n._v("jQuery中$('div'), jQuery库的封装实现基于工厂模式")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class jQuery{\n  constructor(selector){}\n  append(){}\n  addClass(){}\n  html(){}\n}\nWindow.$ = function(selector){\n  return new jQuery(selector)\n}\n")])])]),t("ul",[t("li",[n._v("React.createElement")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Vnode{\n  constructor(tags, attrs, children){\n    //省略内部实现代码 \n  }\n}\nReact.createElement = function(tags, attrs, children){\n  return new Vnode(tags, attrs, children)\n}\n")])])]),t("ul",[t("li",[n._v("vue异步组件")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Vue.component('example-component', ()=>{\n  setTimeout(()=>{\n    resolve({\n      template: '<div>hello</div>'\n    })\n  }, 1000)\n})\n")])])])]),n._v(" "),t("li",[n._v("阅读经典lib源码的意义\n"),t("ul",[t("li",[n._v("学习如何实现功能")]),n._v(" "),t("li",[n._v("学习设计思路")]),n._v(" "),t("li",[n._v("强制自己写代码，最后写出更好的代码")]),n._v(" "),t("li",[n._v("先拿来主义，消化吸收后，再去创新")])])]),n._v(" "),t("li",[n._v("设计原则验证\n"),t("ul",[t("li",[n._v("构造函数与创建者分离，即产品与工厂分离")]),n._v(" "),t("li",[n._v("符合开放封闭原则，即通过工厂方法将构造函数与用户隔离，使他们之间不产生耦合关系")])])])]),n._v(" "),t("h2",{attrs:{id:"单例模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[n._v("#")]),n._v(" 单例模式")]),n._v(" "),t("ul",[t("li",[n._v("特点\n"),t("ul",[t("li",[n._v("系统中被唯一使用")]),n._v(" "),t("li",[n._v("一个类只能初始化一个实例")])])]),n._v(" "),t("li",[n._v("示例\n"),t("ul",[t("li",[n._v("登录框")]),n._v(" "),t("li",[n._v("购物车")])])]),n._v(" "),t("li",[n._v("单例模式的实现思路\n"),t("ul",[t("li",[n._v("如果有了，就直接用，如果没有，就实例化一个，但始终保证这个实例是系统中被唯一使用的")])])]),n._v(" "),t("li",[n._v("代码演示")]),n._v(" "),t("li",[n._v("利用Symbol实现node模块的单例模式")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const FOO_KEY = Symbol.for('foo')\nfunction A(){\n  this.foo = 'hello'\n}\nif(!global[FOO_KEY]){\n  global[FOO_KEY] = new A()\n}\n\nmodule.exports = global[FOO_KEY]\n")])])]),t("ul",[t("li",[n._v("Singleton 模式指的是调用一个类，任何时候返回的都是同一个实例")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class SingleObject{\n  login(){\n    console.log('login......')\n  }\n}\nSingleObject.getInstance = (() => {\n  let instance\n  return function(){\n    if(!instance){\n      instance = new SingleObject()\n    }\n    return instance\n  }\n})()\n\n// 注意：这里只能使用静态方法SingleObject.getInstance()生成单例，而不能使用new SingleObject()\nlet obj1 = SingleObject.getInstance()\nobj1.login()\nlet obj2 = SingleObject.getInstance()\nobj2.login()\nconsole.log(obj1===obj2) //true  obj1与obj2是同一单例，完全相等\nlet obj3 = new SingleObject()\nconsole.log(obj1===obj3) //false\n")])])]),t("ul",[t("li",[n._v("应用场景\n"),t("ul",[t("li",[n._v("jQuery中只有一个'$'")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("if(window.jQuery!=null){\n  return window.jQuery\n}else{\n  //实例化一个\n}\n")])])]),t("ul",[t("li",[n._v("模拟登录框")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class loginForm{\n  constructor(){\n    this.state = 'hide'\n  }\n  show(){\n    if(this.state === 'show'){\n      console.log('已显示')\n      return\n    }\n    this.state = 'show'\n    console.log('登录框显示成功')\n  }\n  hide(){\n    if(this.state === 'hide'){\n      console.log('已隐藏')\n      return\n    }\n    this.state = 'hide'\n    console.log('登录框隐藏成功')\n  }\n}\nloginForm.getInstance=(()=>{\n  let instance\n  return function(){\n    if(!instance){\n      instance = new loginForm()\n    }\n    return instance\n  }\n})()\n\nlet loginForm1 = loginForm.getInstance()\nloginForm1.show() //登录框显示成功\nlet loginForm2 = loginForm.getInstance()\nloginForm2.show() //已显示，因为loginForm1与loginForm2是同一个登录框\nconsole.log(loginForm1===loginForm2)\n\n")])])]),t("ul",[t("li",[n._v("购物车")]),n._v(" "),t("li",[n._v("vuex和redux中的store")])])]),n._v(" "),t("li",[n._v("设计原则验证\n"),t("ul",[t("li",[n._v("符合单一指责原则，只实例化唯一的对象")]),n._v(" "),t("li",[n._v("没法具体符合开放封闭原则，但绝对不违反开放封闭原则")])])])]),n._v(" "),t("h2",{attrs:{id:"观察者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[n._v("#")]),n._v(" 观察者模式")]),n._v(" "),t("ul",[t("li",[n._v("前端应用最多的一种设计模式")]),n._v(" "),t("li",[n._v("特点：\n"),t("ul",[t("li",[n._v("发布 & 订阅")]),n._v(" "),t("li",[n._v("一对多，当然也可以一对一")])])]),n._v(" "),t("li",[n._v("订阅某个主题，当主题发生变化时，通知所有的观察者去执行相应的操作")]),n._v(" "),t("li",[n._v("代码演示·")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 保存状态，状态变化之后触发所有观察者对象\nclass Subject {\n    constructor(){\n      this.state = 0\n      this.observers = []\n    }\n    getState(){\n      return this.state\n    }\n    setState(state){\n      this.state = state\n      this.notifyAllObservers()\n    }\n    notifyAllObservers(){\n      this.observers.forEach(observer => {\n        observer.update()\n      })\n    }\n    attach(observer){\n      this.observers.push(observer)\n    }\n  }\n  // 观察者\n  class Observer {\n    constructor(name, subject){\n      this.name = name\n      this.subject = subject\n      this.subject.attach(this)\n    }\n    update(){\n      console.log(`${this.name} updated, state: ${this.subject.getState()}`)\n    }\n  }\n  \n  // 测试\n  let s = new Subject()\n  let o1 = new Observer('o1', s)\n  let o2 = new Observer('o2', s)\n  \n  s.setState(1)\n  // o1 updated, state: 1\n  // o2 updated, state: 1\n")])])]),t("ul",[t("li",[n._v("应用场景\n"),t("ul",[t("li",[n._v("网页事件绑定，所有的事件监听机制")]),n._v(" "),t("li",[n._v("Promise， .then(() =>{})")]),n._v(" "),t("li",[n._v("jQuery callbacks")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var callbacks = $.Callbacks() //这是jQuery比较底层的一个api\ncallbacks.add(function(info){ //注册监听回调\n  console.log('fn1', info)\n})\ncallbacks.add(function(info){\n  console.log('fn2', info)\n})\ncallbacks.fire('gogogo') //触发\ncallbacks.fire('haahah')\n")])])]),t("ul",[t("li",[n._v("nodejs 自定义事件")]),n._v(" "),t("li",[n._v("nodejs 处理http请求；多进程通信")]),n._v(" "),t("li",[n._v("Vue,React中生命周期函数触发（发布订阅）")]),n._v(" "),t("li",[n._v("vue的watch")])])]),n._v(" "),t("li",[n._v("设计原则验证\n"),t("ul",[t("li",[n._v("主题与观察者分离，不是主动触发而是被动监听，两者解耦")]),n._v(" "),t("li",[n._v("符合开放封闭原则")])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);