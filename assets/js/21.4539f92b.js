(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{381:function(t,e,r){"use strict";r.r(e);var i=r(44),v=Object(i.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"string"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" string")]),t._v(" "),r("h3",{attrs:{id:"静态方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),r("ul",[r("li",[t._v("String.fromCharCode(), 返回参数对应的 Unicode 字符串。")])]),t._v(" "),r("h3",{attrs:{id:"实例属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[t._v("#")]),t._v(" 实例属性")]),t._v(" "),r("ul",[r("li",[t._v("String.prototype.length")]),t._v(" "),r("li",[t._v("字符串实例的length属性返回字符串的长度")])]),t._v(" "),r("h3",{attrs:{id:"实例方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[t._v("#")]),t._v(" 实例方法")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("String.prototype.charAt(),返回指定位置的字符, 参数从0开始")])]),t._v(" "),r("li",[r("p",[t._v("String.prototype.charCodeAt()，返回字符串指定位置的 Unicode 码点")])]),t._v(" "),r("li",[r("p",[t._v("String.prototype.concat()，连接两个字符串，不改变原字符串，返回拼接后的新字符串，如果参数不是字符串，concat方法会将其先转为字符串，然后再连接")])]),t._v(" "),r("li",[r("p",[t._v("String.prototype.slice()，从原字符串取出子字符串并返回，不改变原字符串")]),t._v(" "),r("blockquote",[r("p",[t._v("含首不含尾")])]),t._v(" "),r("blockquote",[r("p",[t._v("若省略第二个参数，则子字符串一直到原字符串结束")])]),t._v(" "),r("blockquote",[r("p",[t._v("若第一个参数大于第二个参数，slice方法返回一个空字符串")])])]),t._v(" "),r("li",[r("p",[t._v("String.prototype.substring(),从原字符串取出子字符串并返回，不改变原字符串，跟slice方法很相像。它的第一个参数表示子字符串的开始位置，第二个位置表示结束位置（返回结果不含该位置）")])]),t._v(" "),r("li",[r("p",[t._v("indexOf方法用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置。如果返回-1，就表示不匹配。第二个参数，表示从该位置开始向后匹配")]),t._v(" "),r("blockquote",[r("p",[t._v("lastIndexOf从尾部开始匹配，indexOf则是从头部开始匹配")])])]),t._v(" "),r("li",[r("p",[t._v("trim方法用于去除字符串两端的空格，返回一个新字符串，不改变原字符串。")])]),t._v(" "),r("li",[r("p",[t._v("toLowerCase方法用于将一个字符串全部转为小写，toUpperCase则是全部转为大写。它们都返回一个新字符串，不改变原字符串。")])]),t._v(" "),r("li",[r("p",[t._v("match方法用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回null,返回的数组还有index属性和input属性，分别表示匹配字符串开始的位置和原始字符串")])]),t._v(" "),r("li",[r("p",[t._v("search方法的用法基本等同于match，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回-1")])]),t._v(" "),r("li",[r("p",[t._v("replace方法用于替换匹配的子字符串")])]),t._v(" "),r("li",[r("p",[t._v("split方法按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。第二个参数，限定返回数组的最大成员数。")])]),t._v(" "),r("li",[r("p",[t._v("localeCompare方法用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。")])])])])}),[],!1,null,null,null);e.default=v.exports}}]);